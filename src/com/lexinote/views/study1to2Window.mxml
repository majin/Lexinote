<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:views="com.lexinote.views.*"
	
	creationComplete="init()"
	hide="close()"
	>
	<mx:Image x="{this.width-30}" y="4" source="@Embed('assets/close.png')" click="this.visible=false" toolTip="閉じる" buttonMode="true"/>

	<mx:Script>
		<![CDATA[
			import mx.core.Application;
			import mx.events.CloseEvent;
			import com.lexinote.models.Word;
			import com.lexinote.utilities.ExArray;
			
			private var _wordModel:Word;
			private var _currentArray:Array;
			private var _correct:Array;
			private var _type:Number;
			private var _idx:Number;

			private function init():void {
				_correct = new Array();
				_wordModel = new Word();
//				var result:SQLResult = _wordModel.query("select *, case when meaning is NULL or meaning='' then standard_meaning else meaning end as xmeaning from Words left join WordDetails on Words.id=WordDetails.word_id where istraining=1 and familiarity=1");
				var result:SQLResult = _wordModel.query("select *, meaning as xmeaning from Words left join WordDetails on Words.id=WordDetails.word_id where istraining=1 and familiarity=1 and meaning <> ''");
				
				_currentArray = new Array();
				var idx:Number = 0;
				for(var i:Number=1; i<=3; i++) {
					for(var j:Number=0; j<result.data.length; j++) {
						_currentArray[idx] = new Object();
						_currentArray[idx].word  = result.data[j];
						_currentArray[idx].qtype = i;
						idx++;
					}
					
				}
				_currentArray = ExArray.shuffle(_currentArray);
				_idx = 0;
				play();
			}
			private function play():void {
				this.currentState = "qtype_a"+_currentArray[_idx].qtype;
				switch(_currentArray[_idx].qtype) {
					case 1: a1.init(_currentArray[_idx].word); break;
					case 2: a2.init(_currentArray[_idx].word); break;
					case 3: a3.init(_currentArray[_idx].word); break;
				}
			}
			public function correctWord(word:Object):void {
				var key:Number = word.id;
				if(!_correct[key]) {
					_correct[key] = word;
					_correct[key].correct = 1;
				}else {
					_correct[key].correct++;
				}
			}

			public function nextWord():void {
				_idx++;
				if(_currentArray.length <= _idx) {
					checkAll();
					return;
				}
				play();
			}
			
			private function checkAll():void {
				var s:Array = new Array();
				for each ( var w:Object in _correct ) {
					if(w.correct >= 3) {
						s[s.length] = w;
						w.familiarity++;
						_wordModel.update({id:w.id}, {
							familiarity: w.familiarity
						});
						Application.application.serverUpdateWord(w);
						Application.application.outputLog(w.id, w.spelling, "study", "1to2", "correct", String(w.familiarity));
					}else {
						Application.application.outputLog(w.id, w.spelling, "study", "1to2", "incorrect", String(w.familiarity));
					}
				}
				//mx.controls.Alert.show(s.join(', '));
				this.currentState = "result";
				aresult.init(s);
			}
			
			private function close():void {
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}			
		]]>
	</mx:Script>
	
	<mx:Button x="10" y="10" label="学習を中断する" height="32" click="this.visible=false" buttonMode="true" />

    <mx:transitions>
        <mx:Transition id="myTransition1" fromState="*" toState="qtype_a1">
            <mx:Parallel id="t1" targets="{[a1]}">
                <mx:Move duration="500" xFrom="{-a1.width}" yFrom="{a1.y}" />
            </mx:Parallel>
        </mx:Transition>
        <mx:Transition id="myTransition2" fromState="*" toState="qtype_a2">
            <mx:Parallel id="t2" targets="{[a2]}">
                <mx:Move duration="500" xFrom="{-a2.width}" yFrom="{a2.y}" />
            </mx:Parallel>
        </mx:Transition>
        <mx:Transition id="myTransition3" fromState="*" toState="qtype_a3">
            <mx:Parallel id="t3" targets="{[a3]}">
                <mx:Move duration="500" xFrom="{-a3.width}" yFrom="{a3.y}" />
            </mx:Parallel>
        </mx:Transition>
        <mx:Transition id="myTransition4" fromState="*" toState="result">
            <mx:Parallel id="t4" targets="{[aresult]}">
                <mx:Move duration="500" xFrom="{-aresult.width}" yFrom="{aresult.y}" />
            </mx:Parallel>
        </mx:Transition>
    </mx:transitions>
	
	<mx:states>
		<mx:State name="qtype_a1">
			<mx:AddChild position="lastChild">
				<views:study1_1 id="a1" width="600" height="650" borderStyle="solid" borderThickness="2" cornerRadius="10" horizontalCenter="0" y="50" />
			</mx:AddChild>
		</mx:State>
		<mx:State name="qtype_a2">
			<mx:AddChild position="lastChild">
				<views:study1_2 id="a2" width="600" height="650" borderStyle="solid" borderThickness="2" cornerRadius="10" horizontalCenter="0" y="50" />
			</mx:AddChild>
		</mx:State>
		<mx:State name="qtype_a3">
			<mx:AddChild position="lastChild">
				<views:study1_3 id="a3" width="600" height="650" borderStyle="solid" borderThickness="2" cornerRadius="10" horizontalCenter="0" y="50" />
			</mx:AddChild>
		</mx:State>
		<mx:State name="result">
			<mx:AddChild position="lastChild">
				<views:study1_result id="aresult" width="600" height="650" borderStyle="solid" borderThickness="2" cornerRadius="10" horizontalCenter="0" y="50" />
			</mx:AddChild>
		</mx:State>
	</mx:states>
</mx:Canvas>
